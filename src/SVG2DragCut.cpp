#include <iostream>
#include <iomanip>
#include <math.h>

#include "SVGPathParser.h"

#define CUTTER_OFFSET 0.25
#define DROP -1.5

double normalizeAngle(double theta) {
    return fmod(theta+2*M_PI, 2*M_PI);
}

int main() {
    SVGPathParser parser;

    std::cout << std::fixed;

    parser.parse("m 128.17586,239.05344 q 0,0.16 -0.36,0.52 l -0.36,0.12 q -3.12,0 -7.32,0.64 -0.16,1.44 -0.24,3.04 -0.04,1.6 -0.2,3.2 -0.32,3.88 -1.2,6 -0.32,0.76 -1,0.56 -0.68,-0.2 -0.52,-1 0.8,-2.2 1,-4.64 0.2,-2.48 0.28,-3.96 0.08,-1.48 0.24,-2.92 -1.24,0.24 -2.52,0.64 -1.24,0.36 -2.48,0.4 -0.24,0.24 -0.52,0.24 -0.28,0 -0.48,-0.16 -0.52,-0.48 -0.16,-1.16 0.28,-0.4 1.16,-0.52 3.48,-0.68 6.88,-1.28 3.4,-0.64 6.96,-0.68 h 0.2 q 0.52,0.24 0.56,0.4 0.04,0.16 0.04,0.16 0.04,0 0.04,0.04 v 0.08 q 0.08,0.16 0,0.28 z");
    parser.parse("m 136.17585,231.05344 q 0.16,-0.72 0.76,-0.72 0.6,0 0.84,0.68 0,1.44 -0.56,3 -0.56,1.52 -1.04,3.28 -0.44,1.76 -0.88,3.88 -0.44,2.08 -1,4.2 1.04,-1.68 2.32,-2.44 0.76,-0.44 1.2,-0.44 0.48,0 1.24,0.24 2.08,0.56 1.6,3.76 -0.16,1.28 -0.68,2.52 -0.52,1.24 -1,1.84 -0.64,0.32 -1.08,-0.08 -0.4,-0.44 -0.08,-1.08 0.92,-1.08 1.16,-3.8 0.12,-1.6 -0.52,-1.84 -0.36,-0.16 -1.2,0.4 -0.84,0.56 -1.48,1.6 -0.64,1 -1.2,2.12 -0.56,1.12 -1.16,2.16 -0.56,1 -1.4,1.68 -0.56,0.32 -1,0 -0.4,-0.28 -0.28,-0.92 0.28,-0.92 0.64,-1.76 0.4,-0.84 0.76,-2 0.36,-1.16 0.68,-2.6 0.36,-1.44 0.76,-3.04 0.4,-1.64 0.8,-3.44 0.4,-1.8 0.76,-3.12 0.36,-1.36 0.68,-2.24 0.36,-0.92 0.36,-1.84 z");
    parser.parse("m 144.09579,242.57344 q 0.36,-0.68 0.96,-0.48 0.64,0.2 0.56,0.92 -0.6,2.16 -1.04,4.32 -0.4,2.12 -1,4.28 -0.32,0.76 -1,0.56 -0.68,-0.2 -0.48,-1.04 0.2,-0.8 0.4,-1.6 0.24,-0.84 0.44,-1.64 v -0.04 q 0.32,-1.32 0.52,-2.64 0.24,-1.36 0.64,-2.64 z m 2.08,-5.72 q 0.68,0.24 0.68,0.84 0,0.6 -0.72,0.76 h -0.16 q -0.44,-0.04 -0.64,-0.28 -0.16,-0.24 -0.16,-0.56 0.04,-0.68 0.84,-0.76 z");
    parser.parse("m 155.09577,243.37344 q 0.56,0.48 0.4,0.88 -0.32,0.76 -1,0.6 -0.8,-0.32 -1.76,0 -1.6,0.52 -2.68,1.16 0.76,0.48 1.6,0.76 0.88,0.28 1.6,0.72 1.68,0.88 2.08,2.4 -0.08,0.48 -0.28,0.72 -1.72,1.2 -4.4,1.76 -2.6,0.56 -4.76,0.12 -0.68,-0.32 -0.52,-0.92 0.16,-0.56 0.84,-0.64 2.56,0.44 5.84,-0.56 0.96,-0.28 1.52,-0.68 -0.68,-0.48 -1.52,-0.8 -0.84,-0.32 -1.64,-0.68 -0.76,-0.4 -1.36,-0.92 -0.56,-0.52 -0.72,-1.44 -0.04,-0.56 0.36,-0.88 4,-2.48 6.4,-1.6 z");
    parser.parse("m 170.17573,242.57344 q 0.36,-0.68 0.96,-0.48 0.64,0.2 0.56,0.92 -0.6,2.16 -1.04,4.32 -0.4,2.12 -1,4.28 -0.32,0.76 -1,0.56 -0.68,-0.2 -0.48,-1.04 0.2,-0.8 0.4,-1.6 0.24,-0.84 0.44,-1.64 v -0.04 q 0.32,-1.32 0.52,-2.64 0.24,-1.36 0.64,-2.64 z m 2.08,-5.72 q 0.68,0.24 0.68,0.84 0,0.6 -0.72,0.76 h -0.16 q -0.44,-0.04 -0.64,-0.28 -0.16,-0.24 -0.16,-0.56 0.04,-0.68 0.84,-0.76 z");
    parser.parse("m 181.17571,243.37344 q 0.56,0.48 0.4,0.88 -0.32,0.76 -1,0.6 -0.8,-0.32 -1.76,0 -1.6,0.52 -2.68,1.16 0.76,0.48 1.6,0.76 0.88,0.28 1.6,0.72 1.68,0.88 2.08,2.4 -0.08,0.48 -0.28,0.72 -1.72,1.2 -4.4,1.76 -2.6,0.56 -4.76,0.12 -0.68,-0.32 -0.52,-0.92 0.16,-0.56 0.84,-0.64 2.56,0.44 5.84,-0.56 0.96,-0.28 1.52,-0.68 -0.68,-0.48 -1.52,-0.8 -0.84,-0.32 -1.64,-0.68 -0.76,-0.4 -1.36,-0.92 -0.56,-0.52 -0.72,-1.44 -0.04,-0.56 0.36,-0.88 4,-2.48 6.4,-1.6 z");
    parser.parse("m 194.49567,247.45344 q 0.32,-0.64 0.76,-1.2 0.48,-0.56 1.64,-1.68 1.2,-1.12 2.16,-1.72 1,-0.6 1.48,-0.64 0.48,-0.04 0.8,0.16 0.68,0.44 0.4,1.32 0.28,-0.2 0.52,-0.36 0.24,-0.2 0.6,-0.24 0.4,-0.08 0.68,0.2 0.28,0.24 0.2,0.72 -0.4,1.48 -0.84,2.68 -0.4,1.2 -0.24,1.96 0.16,0.76 1.16,0.96 1,0.16 3.48,-0.4 0.4,-0.04 0.64,0.16 0.24,0.2 0.28,0.48 0.04,0.28 -0.16,0.56 -0.16,0.28 -0.72,0.44 -1.44,0.36 -2.88,0.36 -1.4,0.04 -2.16,-0.4 -0.72,-0.4 -1.04,-1.08 -0.48,-1.08 0.12,-3.32 -0.6,0.6 -1.44,1.52 -0.84,0.92 -1.2,1.28 -0.36,0.32 -0.68,0.6 -0.28,0.24 -1,0.44 -0.68,0.2 -1.36,0.16 -0.64,-0.04 -1.12,-0.44 -0.48,-0.4 -0.44,-1.12 0.04,-0.76 0.36,-1.4 z m 5.48,-2.44 q -0.44,-0.04 -0.68,-0.36 -1,0.8 -2.08,1.84 -1.08,1 -1.44,2.24 1.6,0.44 3.68,-2.44 0.56,-0.8 1.16,-1.44 -0.24,0.08 -0.64,0.16 z");
    parser.parse("m 219.61562,243.81344 q -0.72,0.2 -1.72,0.48 -0.8,0.16 -1,-0.52 -0.2,-0.68 0.48,-0.96 0.76,-0.28 2.56,-0.72 0.2,-1.44 0.68,-3.04 0.52,-1.6 0.76,-2.76 -0.08,-0.16 0.04,-0.6 0.12,-0.44 0.2,-0.68 0.12,-0.24 0.36,-0.32 0.24,-0.12 0.52,-0.08 0.6,0.16 0.6,0.84 h 0.04 l -0.08,0.16 q -0.24,1.44 -0.64,2.84 -0.36,1.4 -0.68,2.8 l -0.12,0.48 2.52,-0.48 q 0.4,-0.04 0.64,0.16 0.24,0.2 0.28,0.48 0.04,0.28 -0.16,0.56 -0.16,0.28 -0.8,0.4 -2.08,0.4 -2.8,0.56 -0.44,2.44 -1,4.8 -0.52,2.32 -1.6,4.6 -0.48,0.64 -1.04,0.32 -0.56,-0.32 -0.4,-1 0.96,-2.04 1.44,-4.08 0.52,-2.08 0.92,-4.24 z");
    parser.parse("m 235.13558,241.45344 q 0.44,0.32 0.36,1.16 -0.04,0.8 -0.72,1.52 -0.64,0.72 -1.56,1.16 -1.28,0.6 -3.88,0.96 -2.16,2.44 -1.08,3.36 1,0.92 4.44,0.44 2.48,-0.32 4.56,-1 0.72,-0.08 0.92,0.56 0.2,0.6 -0.48,0.96 -4.8,1.36 -8.04,1.08 -2.04,-0.2 -2.72,-1.16 -0.64,-0.96 -0.36,-2.28 0.28,-1.32 1.28,-2.72 1,-1.4 2.28,-2.48 1.28,-1.08 2.64,-1.56 1.36,-0.52 2.36,0 z m -1.44,1.4 q -0.72,0.16 -2.36,1.48 1.6,-0.48 2.36,-1.48 z");
    parser.parse("m 245.61556,243.37344 q 0.56,0.48 0.4,0.88 -0.32,0.76 -1,0.6 -0.8,-0.32 -1.76,0 -1.6,0.52 -2.68,1.16 0.76,0.48 1.6,0.76 0.88,0.28 1.6,0.72 1.68,0.88 2.08,2.4 -0.08,0.48 -0.28,0.72 -1.72,1.2 -4.4,1.76 -2.6,0.56 -4.76,0.12 -0.68,-0.32 -0.52,-0.92 0.16,-0.56 0.84,-0.64 2.56,0.44 5.84,-0.56 0.96,-0.28 1.52,-0.68 -0.68,-0.48 -1.52,-0.8 -0.84,-0.32 -1.64,-0.68 -0.76,-0.4 -1.36,-0.92 -0.56,-0.52 -0.72,-1.44 -0.04,-0.56 0.36,-0.88 4,-2.48 6.4,-1.6 z");
    parser.parse("m 250.33553,243.81344 q -0.72,0.2 -1.72,0.48 -0.8,0.16 -1,-0.52 -0.2,-0.68 0.48,-0.96 0.76,-0.28 2.56,-0.72 0.2,-1.44 0.68,-3.04 0.52,-1.6 0.76,-2.76 -0.08,-0.16 0.04,-0.6 0.12,-0.44 0.2,-0.68 0.12,-0.24 0.36,-0.32 0.24,-0.12 0.52,-0.08 0.6,0.16 0.6,0.84 h 0.04 l -0.08,0.16 q -0.24,1.44 -0.64,2.84 -0.36,1.4 -0.68,2.8 l -0.12,0.48 2.52,-0.48 q 0.4,-0.04 0.64,0.16 0.24,0.2 0.28,0.48 0.04,0.28 -0.16,0.56 -0.16,0.28 -0.8,0.4 -2.08,0.4 -2.8,0.56 -0.44,2.44 -1,4.8 -0.52,2.32 -1.6,4.6 -0.48,0.64 -1.04,0.32 -0.56,-0.32 -0.4,-1 0.96,-2.04 1.44,-4.08 0.52,-2.08 0.92,-4.24 z");

    for(std::vector<Line> *path : parser.paths) {
        Line firstLine = (*path)[0];
        double theta = normalizeAngle(atan2(firstLine.p2.y-firstLine.p1.y, firstLine.p2.x-firstLine.p1.x));

        double x1 = firstLine.p1.x + cos(theta)*CUTTER_OFFSET;
        double y1 = firstLine.p1.y + sin(theta)*CUTTER_OFFSET;

        std::cout << "G0 Z0\n";
        std::cout << "G0 X" << x1 << " Y"  << y1 << "\n";
        std::cout << "G0 Z" << DROP << "\n";

        for(int i = 0; i < (*path).size(); i++) {
            Line line = (*path)[i];
            double theta = normalizeAngle(atan2(line.p2.y-line.p1.y, line.p2.x-line.p1.x));

            double x1 = line.p1.x + cos(theta)*CUTTER_OFFSET;
            double y1 = line.p1.y + sin(theta)*CUTTER_OFFSET;

            double x2 = line.p2.x + cos(theta)*CUTTER_OFFSET;
            double y2 = line.p2.y + sin(theta)*CUTTER_OFFSET;

            std::cout << "G1 X" << x2 << " Y"  << y2 << "\n";

            if(i+1 < (*path).size()) {
                Line nextLine = (*path)[i+1];
                double theta1 = normalizeAngle(atan2(line.p2.y-line.p1.y, line.p2.x-line.p1.x)+M_PI);
                double theta2 = normalizeAngle(atan2(nextLine.p2.y-nextLine.p1.y, nextLine.p2.x-nextLine.p1.x));
                double diffTheta;

                if(theta2 - theta1 > 0) {
                    diffTheta = theta2 - theta1;
                } else {
                    diffTheta = 2*M_PI+theta2-theta1;
                }

                double ax = nextLine.p1.x + cos(theta2)*CUTTER_OFFSET;
                double ay = nextLine.p1.y + sin(theta2)*CUTTER_OFFSET;

                if(diffTheta > M_PI) {
                    std::cout << "G3 R" << CUTTER_OFFSET << " X" << ax << " Y" << ay << "\n";
                } else {
                    std::cout << "G2 R" << CUTTER_OFFSET << " X" << ax << " Y" << ay << "\n";
                }
            }
        }
    }

    std::cout << "G0 Z0\n";
    std::cout << "G0 X0 Y0\n";
}